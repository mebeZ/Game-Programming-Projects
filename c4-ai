{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "colab": {
      "name": "one-player.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mebeZ/Game-Programming-Projects/blob/master/c4-ai\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bTWrXwVEyl60",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import random\n",
        "import pygame\n",
        "import sys\n",
        "import math"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mlMWutfFyl65",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "BLUE = (0,0,255)\n",
        "BLACK = (0,0,0)\n",
        "RED = (255,0,0)\n",
        "YELLOW = (255,255,0)\n",
        "WHITE = (255,255,255)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zTgNKoeFyl6-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "bad_messages = ['Sleep on the sofa', 'Make a mess', 'Spill juice', 'Have bad breath', 'Misplace your shoes', 'Forget to walk dog',\n",
        "           'Complain about chores', 'Wake up super late', 'Play a prank', 'Hide the TV remote', 'Hide the keys', 'Beg for candy',\n",
        "           'Use bad grammar', 'Call parents by first names', 'Turn up your music', 'Laugh over the top', 'Slurp when you drink',\n",
        "           'Chew with mouth open', 'Neglect siblings']\n",
        "\n",
        "good_messages = ['Play cards', 'Play a board game', 'Help with chores', 'Be organized', 'Brush regularly', 'Go to sleep early',\n",
        "                'Share the TV w/ others', 'Eat healthy', 'Keep your music down', 'Be calm', 'Be respectful', 'Cook dinner', \n",
        "                 'Take care of siblings', 'Pass your APs', 'Go on walks', 'Spend money wisely', 'Bake cookies', 'Use good grammar',\n",
        "                 'Help with the garden', 'Go for a family hike']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d4pj24viyl7D",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "ROW_COUNT = 6\n",
        "COLUMN_COUNT = 7\n",
        "\n",
        "PLAYER = 0\n",
        "AI = 1\n",
        "\n",
        "EMPTY = 0\n",
        "PLAYER_PIECE = 1\n",
        "AI_PIECE = 2\n",
        "\n",
        "WINDOW_LENGTH = 4\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ubrg_MpAyl7G",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "messages = ['Test 1', 'Test 2', 'Test 3']"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-OPL8ouMyl7I",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def create_board():\n",
        "    board = np.zeros((ROW_COUNT,COLUMN_COUNT))\n",
        "    return board"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HdZG_aAvyl7L",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def drop_piece(board, row, col, piece):\n",
        "    board[row][col] = piece\n",
        "    return;\n",
        " \n",
        "def is_valid_location(board, col):\n",
        "    return board[ROW_COUNT - 1][col] == 0\n",
        "\n",
        "def print_board(board):\n",
        "    print(np.flip(board, 0))\n",
        "    \n",
        "def get_next_open_row(board, col):\n",
        "    for r in range(ROW_COUNT):\n",
        "        if board[r][col] == 0:\n",
        "            return r\n",
        "        \n",
        "def winning_move(board, piece):\n",
        "    #check for horizontal wins\n",
        "    for c in range(COLUMN_COUNT-3):\n",
        "        for r in range(ROW_COUNT):\n",
        "            if (board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece):\n",
        "                return True\n",
        "            \n",
        "    #check for vertical wins\n",
        "    for c in range(COLUMN_COUNT):\n",
        "        for r in range(ROW_COUNT-3):\n",
        "            if (board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece):\n",
        "                return True\n",
        "    \n",
        "    #check for positively sloped diagonals\n",
        "    for c in range(COLUMN_COUNT-3):\n",
        "        for r in range(ROW_COUNT-3):\n",
        "            if (board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece):\n",
        "                return True\n",
        "    \n",
        "    #check for negatively sloped diagonals\n",
        "    for c in range(COLUMN_COUNT-3):\n",
        "        for r in range(3, ROW_COUNT):\n",
        "            if (board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece):\n",
        "                return True\n",
        "\n",
        "def evaluate_window(window, piece):\n",
        "    score = 0\n",
        "    opp_piece = PLAYER_PIECE\n",
        "    if (piece == PLAYER_PIECE):\n",
        "        opp_piece = AI_PIECE\n",
        "    \n",
        "    #offensive strategies\n",
        "    if window.count(piece) == 4:\n",
        "        score += 100\n",
        "    elif window.count(piece) == 3 and window.count(EMPTY) == 1:\n",
        "        score += 10\n",
        "    elif window.count(piece) == 2:\n",
        "        score += 5\n",
        "    \n",
        "    #defensive strategies\n",
        "    if window.count(opp_piece) == 3 and window.count(EMPTY) == 1:\n",
        "        score -= 80\n",
        "    \n",
        "    return score \n",
        "\n",
        "def score_position(board, piece):\n",
        "    score = 0\n",
        "    \n",
        "    #score down the center\n",
        "    center_array = [int(i) for i in list(board[:, COLUMN_COUNT//2])]\n",
        "    center_count = center_array.count(piece)\n",
        "    score += center_count * 6\n",
        "    \n",
        "    #score horizontally\n",
        "    for r in range(ROW_COUNT):\n",
        "        row_array = [int(i) for i in list(board[r,:])]\n",
        "        for c in range(COLUMN_COUNT-3):\n",
        "            window = row_array[c:c+WINDOW_LENGTH]\n",
        "            score += evaluate_window(window, piece)\n",
        "    \n",
        "    #score vertical\n",
        "    for c in range(COLUMN_COUNT):\n",
        "        col_array = [int(i) for i in list(board[:,c])]\n",
        "        for r in range(ROW_COUNT-3):\n",
        "            window = col_array[r:r+WINDOW_LENGTH]\n",
        "            score += evaluate_window(window, piece)\n",
        "                \n",
        "    #score positive diagonal\n",
        "    for r in range(ROW_COUNT-3):\n",
        "        for c in range(COLUMN_COUNT-3):\n",
        "            window = [board[r+i][c+i] for i in range(WINDOW_LENGTH)]\n",
        "            score += evaluate_window(window, piece)\n",
        "                  \n",
        "    #score negative diagonal\n",
        "    for r in range(ROW_COUNT-3):\n",
        "        for c in range(COLUMN_COUNT-3):\n",
        "            window = [board[r+3-i][c+i] for i in range(WINDOW_LENGTH)]\n",
        "            score += evaluate_window(window, piece)\n",
        "            \n",
        "    return score\n",
        "    \n",
        "def get_valid_locations(board):\n",
        "    valid_locations = []\n",
        "    for col in range(COLUMN_COUNT):\n",
        "        if is_valid_location(board, col):\n",
        "            valid_locations.append(col)\n",
        "    return valid_locations\n",
        "     \n",
        "def pick_best_move(board, piece):\n",
        "    valid_locations = get_valid_locations(board)\n",
        "    best_score = -10000\n",
        "    best_col = random.choice(valid_locations)\n",
        "    for col in valid_locations:\n",
        "        row = get_next_open_row(board, col)\n",
        "        temp_board = board.copy()\n",
        "        drop_piece(temp_board, row, col, piece)\n",
        "        score = score_position(temp_board, piece)\n",
        "        if (score > best_score):\n",
        "            best_score = score\n",
        "            best_col = col\n",
        "    return best_col\n",
        "\n",
        "def draw_board(board):\n",
        "    for c in range(COLUMN_COUNT):\n",
        "        for r in range(ROW_COUNT):\n",
        "            pygame.draw.rect(screen, BLUE, (c*SQUARESIZE, r*SQUARESIZE + SQUARESIZE, SQUARESIZE, SQUARESIZE))\n",
        "            pygame.draw.circle(screen, BLACK, (int(c*SQUARESIZE + SQUARESIZE/2), int(r*SQUARESIZE + SQUARESIZE + SQUARESIZE/2)), RADIUS)\n",
        "    for c in range(COLUMN_COUNT):\n",
        "        for r in range(ROW_COUNT):\n",
        "            if (board[r][c] == PLAYER_PIECE):\n",
        "                    circle = pygame.draw.circle(screen, RED, (int(c*SQUARESIZE + SQUARESIZE/2), height - int(r*SQUARESIZE + SQUARESIZE/2)), RADIUS)\n",
        "            elif (board[r][c] == AI_PIECE):\n",
        "                pygame.draw.circle(screen, YELLOW, (int(c*SQUARESIZE + SQUARESIZE/2), height - int(r*SQUARESIZE + SQUARESIZE/2)), RADIUS)\n",
        "    pygame.display.update()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6VPQ3qICyl7N",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "game_over = False\n",
        "board = create_board()\n",
        "\n",
        "#define graphics\n",
        "pygame.init()\n",
        "\n",
        "SQUARESIZE = 100\n",
        "width = COLUMN_COUNT * SQUARESIZE\n",
        "height = (ROW_COUNT + 1) * SQUARESIZE\n",
        "RADIUS = int(SQUARESIZE/2 - 5)\n",
        "\n",
        "size = (width, height)\n",
        "\n",
        "screen = pygame.display.set_mode(size)\n",
        "draw_board(board)\n",
        "pygame.display.update()\n",
        "\n",
        "myfont = pygame.font.SysFont(\"monospace\", 75)\n",
        "\n",
        "turn = random.randint(PLAYER, AI)    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DiR0AmhQyl7S",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def get_random_message(msg):\n",
        "    return random.choice(msg)\n",
        "\n",
        "def flash_good_message(msg):\n",
        "    message = get_random_message(msg)\n",
        "    textDisplay = myfont.render(message, 1, WHITE)\n",
        "    screen.blit(textDisplay, (20,10))\n",
        "    return;\n",
        "\n",
        "def flash_bad_message(msg):\n",
        "    message = get_random_message(msg)\n",
        "    textDisplay = myfont.render(message, 1, WHITE)\n",
        "    screen.blit(textDisplay, (20,10))\n",
        "    return;\n",
        "    \n",
        "        "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UEozlWJryl7V",
        "colab_type": "code",
        "colab": {},
        "outputId": "dbcff1a0-ef1d-4a85-f79a-ef09dd099c71"
      },
      "source": [
        "while not game_over:\n",
        "    \n",
        "    for event in pygame.event.get():\n",
        "        if event.type == pygame.QUIT:\n",
        "            pygame.display.quit()\n",
        "            pygame.quit()\n",
        "            sys.exit()\n",
        "        \n",
        "        if event.type == pygame.MOUSEMOTION:\n",
        "            pygame.draw.rect(screen, BLACK, (0, 0, width, SQUARESIZE))\n",
        "            posx = event.pos[0]\n",
        "            if turn == PLAYER:\n",
        "                pygame.draw.circle(screen, RED, (posx, int(SQUARESIZE/2)), RADIUS)\n",
        "        pygame.display.update()\n",
        "        \n",
        "        if event.type == pygame.MOUSEBUTTONDOWN:\n",
        "            pygame.draw.rect(screen, BLACK, (0, 0, width, SQUARESIZE))\n",
        "            \n",
        "            #Player 1's turn\n",
        "            if (turn == PLAYER):\n",
        "                posx = event.pos[0]\n",
        "                col = int(math.floor(posx / SQUARESIZE))\n",
        "                \n",
        "                if is_valid_location(board, col):\n",
        "                    row = get_next_open_row(board, col)\n",
        "                    drop_piece(board, row, col, PLAYER_PIECE)\n",
        "                    \n",
        "                    \n",
        "                    if winning_move(board, PLAYER_PIECE):\n",
        "                        label = myfont.render(\"Player 1 Wins!!\", 1, RED)\n",
        "                        screen.blit(label, (20,10))\n",
        "                        game_over = True\n",
        "                    \n",
        "                    #update board\n",
        "                    print_board(board)\n",
        "                    draw_board(board)\n",
        "                    flash_good_message(good_messages)\n",
        "                    \n",
        "                    #alternate turns\n",
        "                    turn = AI\n",
        "                    \n",
        "    #Player 2's turn\n",
        "    if turn == AI and not game_over:\n",
        "        \n",
        "        \n",
        "        col = pick_best_move(board, AI_PIECE)\n",
        "        \n",
        "        if is_valid_location(board, col):\n",
        "            pygame.time.wait(500)\n",
        "            row = get_next_open_row(board, col)\n",
        "            drop_piece(board, row, col, AI_PIECE)\n",
        "            \n",
        "            \n",
        "            if winning_move(board, AI_PIECE):\n",
        "                label = myfont.render(\"Player 2 Wins!!\", 1, YELLOW)\n",
        "                screen.blit(label, (20,10))\n",
        "                game_over = True\n",
        "\n",
        "            #update board\n",
        "            print_board(board)\n",
        "            draw_board(board)\n",
        "            flash_bad_message(messages)\n",
        "            \n",
        "            #alternate turns\n",
        "            turn = PLAYER\n",
        "            \n",
        "    #game ending\n",
        "    if game_over:\n",
        "        pygame.time.wait(3000)\n",
        "        pygame.display.quit()\n",
        "        pygame.quit()\n",
        "        sys.exit()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 1. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 2. 2. 0. 0. 0.]\n",
            " [0. 0. 1. 1. 0. 0. 0.]]\n",
            "[[0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 2. 2. 0. 0. 0.]\n",
            " [0. 0. 1. 1. 1. 0. 0.]]\n",
            "[[0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 2. 0. 0. 0.]\n",
            " [0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 2. 2. 0. 0. 0.]\n",
            " [0. 2. 1. 1. 1. 0. 0.]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "SystemExit",
          "evalue": "",
          "traceback": [
            "An exception has occurred, use %tb to see the full traceback.\n",
            "\u001b[1;31mSystemExit\u001b[0m\n"
          ]
        }
      ]
    }
  ]
}